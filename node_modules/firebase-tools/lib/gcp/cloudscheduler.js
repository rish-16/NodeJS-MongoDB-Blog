"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api = require("../api");
const utils_1 = require("../utils");
const VERSION = "v1beta1";
function createJob(schedule) {
    const strippedName = schedule.name.replace(/\/[^\/]+$/, "");
    return api.request("POST", `/${VERSION}/${strippedName}`, {
        auth: true,
        origin: api.cloudschedulerOrigin,
        data: Object.assign({ timeZone: "America/Los_Angeles" }, schedule),
    });
}
exports.createJob = createJob;
function deleteJob(name) {
    return api.request("DELETE", `/${VERSION}/${name}`, {
        auth: true,
        origin: api.cloudschedulerOrigin,
    });
}
exports.deleteJob = deleteJob;
function createOrReplaceJob(schedule) {
    return __awaiter(this, void 0, void 0, function* () {
        const jobName = `${schedule.name.split("/")[5]}`;
        try {
            yield createJob(schedule);
            utils_1.logLabeledSuccess("functions", `created scheduler job ${jobName}`);
        }
        catch (e) {
            if (e.context.response.statusCode !== 409) {
                throw e;
            }
            utils_1.logLabeledBullet("functions", `re-creating scheduler job ${jobName}`);
            yield deleteJob(schedule.name);
            return createJob(schedule);
        }
    });
}
exports.createOrReplaceJob = createOrReplaceJob;
//# sourceMappingURL=cloudscheduler.js.map