"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const childProcess = require("child_process");
const clc = require("cli-color");
const Command = require("../command");
const getProjectNumber = require("../getProjectNumber");
const requireAuth = require("../requireAuth");
const requireConfig = require("../requireConfig");
const types_1 = require("../emulator/types");
const utils = require("../utils");
const logger = require("../logger");
const controller = require("../emulator/controller");
const registry_1 = require("../emulator/registry");
const firestoreEmulator_1 = require("../emulator/firestoreEmulator");
function runScript(script) {
    return __awaiter(this, void 0, void 0, function* () {
        utils.logBullet(`Running script: ${clc.bold(script)}`);
        const env = {};
        const firestoreInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.FIRESTORE);
        if (firestoreInstance) {
            const info = firestoreInstance.getInfo();
            const hostString = `${info.host}:${info.port}`;
            env[firestoreEmulator_1.FirestoreEmulator.FIRESTORE_EMULATOR_ENV] = hostString;
        }
        const proc = childProcess.spawn(script, {
            stdio: ["inherit", "pipe", "pipe"],
            shell: true,
            windowsHide: true,
            env,
        });
        logger.debug(`Running ${script} with environment ${JSON.stringify(env)}`);
        proc.stdout.on("data", (data) => {
            process.stdout.write(data.toString());
        });
        proc.stderr.on("data", (data) => {
            process.stderr.write(data.toString());
        });
        return new Promise((resolve, reject) => {
            proc.on("error", (err) => {
                utils.logWarning(`There was an error running the script: ${JSON.stringify(err)}`);
                reject();
            });
            const exitDelayMs = 500;
            proc.once("exit", (code, signal) => {
                if (signal) {
                    utils.logWarning(`Script exited with signal: ${signal}`);
                    setTimeout(reject, exitDelayMs);
                }
                if (code === 0) {
                    utils.logSuccess(`Script exited successfully (code 0)`);
                    setTimeout(resolve, exitDelayMs);
                }
                else {
                    utils.logWarning(`Script exited unsuccessfully (code ${code})`);
                    setTimeout(resolve, exitDelayMs);
                }
            });
        });
    });
}
module.exports = new Command("emulators:exec <script>")
    .before((options) => __awaiter(this, void 0, void 0, function* () {
    yield requireConfig(options);
    yield requireAuth(options);
    yield getProjectNumber(options);
}))
    .description("start the local Firebase emulators, " + "run a test script, then shut down the emulators")
    .option("--only <list>", "only run specific emulators. " +
    "This is a comma separated list of emulators to start. " +
    "Valid options are: " +
    JSON.stringify(controller.VALID_EMULATOR_STRINGS))
    .action((script, options) => __awaiter(this, void 0, void 0, function* () {
    try {
        yield controller.startAll(options);
        yield runScript(script);
    }
    catch (e) {
        logger.debug("Error in emulators:exec", e);
        throw e;
    }
    finally {
        yield controller.cleanShutdown();
    }
}));
//# sourceMappingURL=emulators-exec.js.map